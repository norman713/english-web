// src/pages/Admin/Test/UserTestPage.tsx
import React, { useState, useEffect } from "react";
import Pagination from "../../../../components/Pagination";
import { useNavigate } from "react-router-dom";
import testApi, { TestItem as RawTestItem } from "../../../../api/testApi";

// ƒê·ªãnh nghƒ©a l·∫°i ki·ªÉu local ƒë·ªÉ hi·ªÉn th·ªã (t∆∞∆°ng t·ª± nh∆∞ m·∫£ng c·ª©ng tr∆∞·ªõc ƒë√¢y)
interface DisplayTestItem {
  id: string;           // L·∫•y t·ª´ RawTestItem.id
  title: string;        // RawTestItem.name
  questionNumber: number; // RawTestItem.questionCount
  testTime: string;     // RawTestItem.minutes + " ph√∫t"
  testType: string;     // RawTestItem.topic
}

const UserTestPage: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 6;
  const navigate = useNavigate();

  // State ch·ª©a danh s√°ch ƒë·ªÅ thi t·∫£i v·ªÅ t·ª´ API
  const [testList, setTestList] = useState<DisplayTestItem[]>([]);
  // State ƒë·ªÉ theo d√µi ƒëang loading hay ƒë√£ xong
  const [loading, setLoading] = useState(true);

  // 1. Khi component mount, g·ªçi API l·∫•y v·ªÅ t·∫•t c·∫£ ƒë·ªÅ thi (page=1, size l·ªõn)
  useEffect(() => {
    const fetchAllTests = async () => {
      try {
        // Gi·∫£ s·ª≠ server c√≥ kho·∫£ng <10000 ƒë·ªÅ, g·ªçi page=1 & size=10000
        const response = await testApi.getAll(1, 10000);
        // response.tests: RawTestItem[]
        const mapped: DisplayTestItem[] = response.tests.map(
          (item: RawTestItem) => ({
            id: item.id,
            title: item.name,
            questionNumber: item.questionCount,
            testTime: `${item.minutes} ph√∫t`,
            testType: item.topic,
          })
        );
        setTestList(mapped);
      } catch (error) {
        console.error("L·ªói khi t·∫£i danh s√°ch ƒë·ªÅ thi:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchAllTests();
  }, []);

  // 2. L·ªçc theo searchQuery (gi·ªØ nguy√™n logic c≈©)
  const filteredTests = testList.filter((test) =>
    test.title.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // 3. T√≠nh ph√¢n trang
  const lastIndex = currentPage * itemsPerPage;
  const firstIndex = lastIndex - itemsPerPage;
  const currentTests = filteredTests.slice(firstIndex, lastIndex);

  // 4. X·ª≠ l√Ω ƒë·ªïi trang
  const onPageChange = (page: number) => {
    if (page < 1 || page > Math.ceil(filteredTests.length / itemsPerPage))
      return;
    setCurrentPage(page);
  };

  // 5. Khi b·∫•m ‚ÄúChi ti·∫øt‚Äù, chuy·ªÉn t·ªõi trang chi ti·∫øt v·ªõi id
  const handleDetailClick = (id: string) => {
    navigate(`/user/test/overall/${id}`);
  };

  // 6. N·∫øu loading, hi·ªÉn th·ªã placeholder
  if (loading) {
    return (
      <div className="test-container">
        <div className="p-8 text-center text-gray-500">ƒêang t·∫£i ƒë·ªÅ thi‚Ä¶</div>
      </div>
    );
  }

  return (
    <div className="test-container">
      {/* Test Tab */}
      <div className="test-tab ">
        {/* Top Test */}
        <div className="top-test p-4 flex items-center justify-between">
          <h2 className="text-3xl font-bold text-blue-900">Th∆∞ vi·ªán ƒë·ªÅ thi</h2>
          <div className="search-container flex items-center border border-blue-300 rounded px-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 text-blue-500"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M11 4a7 7 0 100 14 7 7 0 000-14zm10 10l-4-4"
              />
            </svg>
            <input
              type="text"
              placeholder="T√¨m ki·∫øm"
              value={searchQuery}
              onChange={(e) => {
                setSearchQuery(e.target.value);
                setCurrentPage(1); // khi search ƒë·ªïi, reset trang v·ªÅ 1
              }}
              className="w-full p-2 outline-none"
            />
          </div>
        </div>

        {/* Test List */}
        <div className="test-list p-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-10 mx-10">
          {currentTests.map((test) => (
            <div
              key={test.id}
              className="test-item p-4 rounded bg-[rgba(99,176,239,0.23)]"
            >
              <h3 className="test-title font-bold text-2xl">{test.title}</h3>
              <p className="test-detail text-[20px] font-bold text-[rgba(0,0,0,0.50)]">
                <span className="icon-text">üìÑ</span> {test.questionNumber} c√¢u
                h·ªèi
              </p>
              <p className="test-detail text-[20px] font-bold text-[rgba(0,0,0,0.50)]">
                <span className="icon-clock">‚è∞</span> {test.testTime}
              </p>
              <p className="test-detail text-[20px] font-bold text-[rgba(0,0,0,0.50)]">
                <span className="icon-hashtag">#</span> {test.testType}
              </p>
              <div className="test-buttons flex space-x-2 mt-4">
                <button
                  className="start-button bg-white text-blue-500 rounded flex justify-center items-end gap-10 p-2 w-full"
                  onClick={() => handleDetailClick(test.id)}
                >
                  Chi ti·∫øt
                </button>
              </div>
            </div>
          ))}

          {/* N·∫øu kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o */}
          {filteredTests.length === 0 && (
            <div className="col-span-full text-center text-gray-500">
              Kh√¥ng t√¨m th·∫•y ƒë·ªÅ thi ph√π h·ª£p.
            </div>
          )}
        </div>

        {/* Pagination */}
        {filteredTests.length > itemsPerPage && (
          <Pagination
            totalItems={filteredTests.length}
            itemsPerPage={itemsPerPage}
            currentPage={currentPage}
            onPageChange={onPageChange}
            siblingCount={1} // c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh n·∫øu mu·ªën
          />
        )}
      </div>
    </div>
  );
};

export default UserTestPage;
